/**
 * @author Jason
 */
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.util.ArrayList;
import javax.swing.Timer;
import java.io.FileInputStream;
import java.io.InputStream;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;



public class SimonGUI extends javax.swing.JFrame {

    ArrayList computerMove = new ArrayList();
    ArrayList playerMove = new ArrayList();

    private int countLevel = 0;
    private int count = 0;
    private int sec = 1000;
    private int secHalf = 500;
    private int gameSize = 10;
    private int timeSet = 0;

    private boolean ready = true;

    //Off Colors
    Color blueOff = new Color(0x597DF9);
    Color greenOff = new Color(0x5BAD00);
    Color yellowOff = new Color(0xFFF44F);
    Color redOff = new Color(0xFF3300);

    //On Colors
    Color blueOn = new Color(0x2300A6);
    Color greenOn = new Color(0x005805);
    Color yellowOn = new Color(0xB4BA00);
    Color redOn = new Color(0x620002);

    public SimonGUI() {
        initComponents();
        try{
        InputStream backGroundIn = new FileInputStream("looper.wav");
        AudioStream backAs = new AudioStream(backGroundIn);
        AudioPlayer.player.start();
        }catch(Exception e){
            
        }
        //Setting buttons off
        blueToggleButton.setBackground(blueOff);
        greenToggleButton.setBackground(greenOff);
        yellowToggleButton.setBackground(yellowOff);
        redToggleButton.setBackground(redOff);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        blueToggleButton = new javax.swing.JToggleButton();
        greenToggleButton = new javax.swing.JToggleButton();
        redToggleButton = new javax.swing.JToggleButton();
        yellowToggleButton = new javax.swing.JToggleButton();
        startButton = new javax.swing.JButton();
        levelLabel = new javax.swing.JLabel();
        easyRadioButton = new javax.swing.JRadioButton();
        hardRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Simon");
        setBackground(new java.awt.Color(153, 51, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        blueToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueToggleButtonActionPerformed(evt);
            }
        });

        greenToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenToggleButtonActionPerformed(evt);
            }
        });

        redToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redToggleButtonActionPerformed(evt);
            }
        });

        yellowToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowToggleButtonActionPerformed(evt);
            }
        });

        startButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 11)); // NOI18N
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        levelLabel.setBackground(new java.awt.Color(255, 255, 255));
        levelLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        levelLabel.setForeground(new java.awt.Color(255, 255, 255));
        levelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelLabel.setText("LEVEL 1");

        easyRadioButton.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(easyRadioButton);
        easyRadioButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 11)); // NOI18N
        easyRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        easyRadioButton.setSelected(true);
        easyRadioButton.setText("Easy");
        easyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyRadioButtonActionPerformed(evt);
            }
        });

        hardRadioButton.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(hardRadioButton);
        hardRadioButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 11)); // NOI18N
        hardRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        hardRadioButton.setText("Hard");
        hardRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(easyRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(hardRadioButton)
                .addGap(33, 33, 33))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(levelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(blueToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(greenToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(yellowToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(redToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 21, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {blueToggleButton, greenToggleButton, redToggleButton, yellowToggleButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(levelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(blueToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addComponent(greenToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(redToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(yellowToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(easyRadioButton)
                    .addComponent(hardRadioButton))
                .addGap(32, 32, 32))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {blueToggleButton, greenToggleButton, redToggleButton, yellowToggleButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

        computerPlay.start();
        startButton.setEnabled(false);
        hardRadioButton.setVisible(false);
        easyRadioButton.setVisible(false);
        startButton.setText("Next Level");
        computerMove.add((int) Math.ceil(Math.random() * 4));
        if (count > 4) {
            computerPlay.setDelay(600);
            buttonsOff.setDelay(300);
        }

        count = 0;
        countLevel++;
        levelLabel.setText("LEVEL " + countLevel);


    }//GEN-LAST:event_startButtonActionPerformed

    private void yellowToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yellowToggleButtonActionPerformed

        if (computerPlay.isRunning() || ready) {
            yellowToggleButton.setSelected(false);
        } else {
            playerMove.add(4);
            timer.stop();
            timeSet =0;
            checkCorrect();
            yellowToggleButton.setSelected(false);
            playSound(4);
        }
    }//GEN-LAST:event_yellowToggleButtonActionPerformed

    private void blueToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueToggleButtonActionPerformed

        if (computerPlay.isRunning() || ready) {
            blueToggleButton.setSelected(false);
        } else {
            playerMove.add(1);
            timer.stop();
            timeSet =0;
            checkCorrect();
            blueToggleButton.setSelected(false);
            playSound(1);
        }

    }//GEN-LAST:event_blueToggleButtonActionPerformed

    private void greenToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenToggleButtonActionPerformed

        if (computerPlay.isRunning() || ready) {
            greenToggleButton.setSelected(false);
        } else {
            playerMove.add(3);
            timer.stop();
            timeSet =0;
            checkCorrect();
            greenToggleButton.setSelected(false);
            playSound(3);
        }
    }//GEN-LAST:event_greenToggleButtonActionPerformed

    private void redToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redToggleButtonActionPerformed

        if (computerPlay.isRunning() || ready) {
            redToggleButton.setSelected(false);
        } else {
            playerMove.add(2);
            timer.stop();
            timeSet =0;
            checkCorrect();
            redToggleButton.setSelected(false);
            playSound(2);
        }

    }//GEN-LAST:event_redToggleButtonActionPerformed

    private void easyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyRadioButtonActionPerformed
        
        computerPlay.setDelay(1000);
        buttonsOff.setDelay(500);
        gameSize = 5;
        
    }//GEN-LAST:event_easyRadioButtonActionPerformed

    private void hardRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardRadioButtonActionPerformed
        computerPlay.setDelay(600);
        buttonsOff.setDelay(300);
        gameSize = 10;
    }//GEN-LAST:event_hardRadioButtonActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimonGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton blueToggleButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton easyRadioButton;
    private javax.swing.JToggleButton greenToggleButton;
    private javax.swing.JRadioButton hardRadioButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JToggleButton redToggleButton;
    private javax.swing.JButton startButton;
    private javax.swing.JToggleButton yellowToggleButton;
    // End of variables declaration//GEN-END:variables

    
    //Timer to run the game
    Timer computerPlay = new Timer(sec, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {

            //Checking if the game level is done
            if (computerMove.size() == count) {
                computerPlay.stop();
                buttonsOff.stop();
                ready = true;
                
            } else {
                buttonsOff.stop();
                computerTurn();
                ready = false;
                
            }

        }

    });
    
    Timer timer = new Timer(500, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent ae) {
            
            timeSet++;
            System.out.println(timeSet);
            if(timeSet > 4){
               timer.stop();
               levelLabel.setText("Game Over");
               playerMove.clear();
               computerMove.clear();
               startButton.setEnabled(true);
               hardRadioButton.setVisible(true);
               easyRadioButton.setVisible(true);
               startButton.setText("Start");
               count = 0;
               countLevel = 0;
               ready = true;
               playSound(5);
               timeSet =0;
            }
            
        }
    });

    //Timer to turn the buttons
    Timer buttonsOff = new Timer(secHalf, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {

            blueToggleButton.setBackground(blueOff);
            redToggleButton.setBackground(redOff);
            greenToggleButton.setBackground(greenOff);
            yellowToggleButton.setBackground(yellowOff);

            if (count == computerMove.size()) {
                computerPlay.stop();
                buttonsOff.stop();
                timer.start();
            }

        }

    });
    Timer soundD = new Timer(300, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {

            playSound(6);
            soundD.stop();

        }

    });

    private void computerTurn() {

        System.out.println(computerMove.get(this.count)+"hello");

        int index;
        index = (int) computerMove.get(this.count);

        switch (index) {
            case 1:
                blueToggleButton.setBackground(blueOn);
                playSound(1);
                break;

            case 2:
                redToggleButton.setBackground(redOn);
                playSound(2);
                break;

            case 3:
                greenToggleButton.setBackground(greenOn);
                playSound(3);
                break;

            case 4:
                yellowToggleButton.setBackground(yellowOn);
                playSound(4);
                break;
        }
        buttonsOff.start();
        count++;
    }

    private void checkCorrect() {

        try {
            if (computerMove.size() == playerMove.size() && compair(computerMove, playerMove)) {
                //playSound(6);
                if (count == gameSize) {
                    levelLabel.setText("You Won");
                    startButton.setText("Play again");
                    startButton.setEnabled(true);
                    hardRadioButton.setVisible(true);
                    easyRadioButton.setVisible(true);
                    playerMove.clear();
                    computerMove.clear();
                    count = 0;
                    countLevel = 0;
                    ready = true;
                    playSound(7);
                } else {
                    levelLabel.setText("Great Job");
                    playerMove.clear();
                    startButton.setEnabled(true);
                    
                    soundD.start();
                }

            } else if (compair(computerMove, playerMove) == false /*computerMove.get(trackGo) != playerMove.get(trackGo)*/) {
                levelLabel.setText("Game Over");
                playerMove.clear();
                computerMove.clear();
                startButton.setEnabled(true);
                hardRadioButton.setVisible(true);
                easyRadioButton.setVisible(true);
                startButton.setText("Start");
                count = 0;
                countLevel = 0;
                ready = true;
                playSound(5);

            }
        } catch (ArrayIndexOutOfBoundsException e) {
            levelLabel.setText("Game Over");
        }

    }

    private boolean compair(ArrayList cMove, ArrayList pMove) {

        for (int i = 0; i < pMove.size(); i++) {

            if (cMove.get(i) != pMove.get(i)) {
                return false;
            }
        }
        return true;
    }

    private void playSound(int pick) {
        String sound = "";

        switch (pick) {
            case 1:
                sound = "beep1.wav";
                break;
            case 2:
                sound = "beep2.wav";
                break;
            case 3:
                sound = "beep3.wav";
                break;
            case 4:
                sound = "beep4.wav";
                break;
            case 5:
                sound = "beepOver.wav";
                break;
            case 6:
                sound = "beepWin.wav";
                break;
            case 7:
                sound = "beepComplete.wav";
                break;
        }

        try {
            // Open an audio input stream.
            InputStream in = new FileInputStream(sound);
            AudioStream as = new AudioStream(in);
            AudioPlayer.player.start(as);
            
           
            //AudioPlayer.player.stop(as); 
        } catch (Exception e) {
//        String bip = "beep1.mp3";
//        Media hit = new Media(bip);
//        MediaPlayer mediaPlayer = new MediaPlayer(hit);
//        mediaPlayer.play();

        }

    }
}
